{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This website contains the documentation for my implementation of the lox programming language.","title":"Home"},{"location":"Arrays/","text":"Lox supports heterogeneous dynamic arrays i.e the array elements can be any lox defined value, like primitve int , bools , objects , functions etc. Definition An array is created with the following syntax: [value1, value2, ......] There are three main methods provided by lox for arrays: append(val) Adds a value to the end of the existing array Example : var a = [1, 2, 3]; a.append(4); print a; // [1, 2, 3, 4] get(index) Returns the value at the specified index. Indexing is 0-based. Warning If index is out of bounds, an error is thrown. Example : var a = [23, 2, 3]; print a.get(0); // 23 update(index, val) Replaces the value at index index with val . Index is 0-based. Warning If index is out of bounds, an error is thrown. Example : var a = [23, 2, 3]; a.update(1, 90); print a.get(1); // 90","title":"Arrays"},{"location":"Arrays/#definition","text":"An array is created with the following syntax: [value1, value2, ......] There are three main methods provided by lox for arrays:","title":"Definition"},{"location":"Arrays/#appendval","text":"Adds a value to the end of the existing array Example : var a = [1, 2, 3]; a.append(4); print a; // [1, 2, 3, 4]","title":"append(val)"},{"location":"Arrays/#getindex","text":"Returns the value at the specified index. Indexing is 0-based. Warning If index is out of bounds, an error is thrown. Example : var a = [23, 2, 3]; print a.get(0); // 23","title":"get(index)"},{"location":"Arrays/#updateindex-val","text":"Replaces the value at index index with val . Index is 0-based. Warning If index is out of bounds, an error is thrown. Example : var a = [23, 2, 3]; a.update(1, 90); print a.get(1); // 90","title":"update(index, val)"},{"location":"BasicSyntax/","text":"Basic Syntax Numbers Numebrs in lox are double-precision floating point numbers by default. Addition / Subtraction / Multiplication and Division is supported natively. Strings Strings in lox are to be enclosed in double-inverted commas. String concatenation is supported through the + operator Example var a = \"Hello \"; var b = \"World\"; var c = a + b; // c contains \"Hello World\" Variables Variables are declared and assigned with the following syntax var <variable_name> ; var <variable_name> = <expresssion>; Example var a; var b = 16; Until the value of the variable is intialized, it holds the value nil Warning Note : Redeclaring variables is only allowed in the global scope. Any attempt to redeclare variables in a local scope will lead to an error. Assignment Variable assignnments are considered to be expressions by lox and thus return the value that is being assigned. This allows for chained assignment. Example var a; var b; var c; c = b = a = 5; Booleans Booleans in lox are denoted by true and false . Truthiness In lox only nil and false are Falsy values. Every other value is considered to be Truthy. Example : if (12) { print \"Yes\"; } // Yes If-else statements Syntax if (<condition>) { <statements> } else { <statements> } If the block has only one statement, the braces can be ommitted. Example if (18 >= 7) { print \"larger\"; } else print \"smaller\"; Ternary Lox provides inline support for branching statements through the ternary operator. Syntax condition ? expression1 : expression2 Example var a = 16 > 2 ? 5 : 7; Print Lox allows outputting outside the program through print . Syntax print <expression>; Example print \"Hello World\"; Comments Single line comments begin with // and multiline comments can be enclosed in /* and */ .","title":"Basic Syntax"},{"location":"BasicSyntax/#basic-syntax","text":"","title":"Basic Syntax"},{"location":"BasicSyntax/#numbers","text":"Numebrs in lox are double-precision floating point numbers by default. Addition / Subtraction / Multiplication and Division is supported natively.","title":"Numbers"},{"location":"BasicSyntax/#strings","text":"Strings in lox are to be enclosed in double-inverted commas. String concatenation is supported through the + operator Example var a = \"Hello \"; var b = \"World\"; var c = a + b; // c contains \"Hello World\"","title":"Strings"},{"location":"BasicSyntax/#variables","text":"Variables are declared and assigned with the following syntax var <variable_name> ; var <variable_name> = <expresssion>; Example var a; var b = 16; Until the value of the variable is intialized, it holds the value nil Warning Note : Redeclaring variables is only allowed in the global scope. Any attempt to redeclare variables in a local scope will lead to an error.","title":"Variables"},{"location":"BasicSyntax/#assignment","text":"Variable assignnments are considered to be expressions by lox and thus return the value that is being assigned. This allows for chained assignment. Example var a; var b; var c; c = b = a = 5;","title":"Assignment"},{"location":"BasicSyntax/#booleans","text":"Booleans in lox are denoted by true and false .","title":"Booleans"},{"location":"BasicSyntax/#truthiness","text":"In lox only nil and false are Falsy values. Every other value is considered to be Truthy. Example : if (12) { print \"Yes\"; } // Yes","title":"Truthiness"},{"location":"BasicSyntax/#if-else-statements","text":"Syntax if (<condition>) { <statements> } else { <statements> } If the block has only one statement, the braces can be ommitted. Example if (18 >= 7) { print \"larger\"; } else print \"smaller\";","title":"If-else statements"},{"location":"BasicSyntax/#ternary","text":"Lox provides inline support for branching statements through the ternary operator. Syntax condition ? expression1 : expression2 Example var a = 16 > 2 ? 5 : 7;","title":"Ternary"},{"location":"BasicSyntax/#print","text":"Lox allows outputting outside the program through print . Syntax print <expression>; Example print \"Hello World\";","title":"Print"},{"location":"BasicSyntax/#comments","text":"Single line comments begin with // and multiline comments can be enclosed in /* and */ .","title":"Comments"},{"location":"Classes/","text":"Classes Syntax Class in lox can be defined with the following syntax: class <class_name> < <parentclass_name> { init(<parameters>) //the constructor { } method_1(<parameters>) { ... } . . . static smethod_1(<parameters>) { .... } } This To refer to the current object in the methohds, the keyword this can be used. Using this in static methods will throw an error. Constructor The constructor of the class can be defined through init . Each of the methods of the classes are defined the same way functions are defined with the only change being that we dont use the fun keyword. Note that in case of a class having a parent class, when the object for the class is initialized, only the constructor for the subclass is called automatically. If one wishes to call the constructor of the parent class, they can do so with super . An example of this is shown in the Inheritance section. Static methods Lox has support for static methods, which can directly be called from the class without instantiating an object for that class. All such methods must be prefixed with the static . Example: class Math{ init() { print \"math module initialized\"; } static square(a){ return a * a; } static min(a, b){ if (a < b) return a; return b; } static max(a, b){ if (a > b) return a; return b; } static abs(a){ return a > 0 ? a : -a; } } print Math.square(6); print Math.min(10, 5); print Math.max(782, 37349); print Math.abs(-92); Inheritance Lox has support for single - inheritance. During the definintion of the class the parent class is to be specified after the < token. All the methods of the parent class including the constructor are available to the child class. When a method is called from the child class / object, first the method is searched in the sub class and then the super class. Suppose two methods with the same name exist in both the subclass and the superclass and a user wants to call the method in the superclass directly, super can be used. Example class Vehicle{ init(name) { this.name = name; } forward() { print this.name + \" Moves forward\"; } } class Car < Vehicle{ init(name) { super.init(name); } wheels() { print this.name + \" Has four wheels\"; } } class Bike < Vehicle{ init(name) { super.init(name); } wheels() { print this.name + \" Has two wheels\"; } } var honda = Bike(\"Honda\"); honda.forward(); honda.wheels(); var mclaren = Car(\"McLaren\"); mclaren.forward(); mclaren.wheels(); Important lox forbids the use of super in static methods. Warning When an object is created init is automatically called for the base class and if it is called again explicitly by the user, an error is thrown.","title":"Classes"},{"location":"Classes/#classes","text":"","title":"Classes"},{"location":"Classes/#syntax","text":"Class in lox can be defined with the following syntax: class <class_name> < <parentclass_name> { init(<parameters>) //the constructor { } method_1(<parameters>) { ... } . . . static smethod_1(<parameters>) { .... } }","title":"Syntax"},{"location":"Classes/#this","text":"To refer to the current object in the methohds, the keyword this can be used. Using this in static methods will throw an error.","title":"This"},{"location":"Classes/#constructor","text":"The constructor of the class can be defined through init . Each of the methods of the classes are defined the same way functions are defined with the only change being that we dont use the fun keyword. Note that in case of a class having a parent class, when the object for the class is initialized, only the constructor for the subclass is called automatically. If one wishes to call the constructor of the parent class, they can do so with super . An example of this is shown in the Inheritance section.","title":"Constructor"},{"location":"Classes/#static-methods","text":"Lox has support for static methods, which can directly be called from the class without instantiating an object for that class. All such methods must be prefixed with the static . Example: class Math{ init() { print \"math module initialized\"; } static square(a){ return a * a; } static min(a, b){ if (a < b) return a; return b; } static max(a, b){ if (a > b) return a; return b; } static abs(a){ return a > 0 ? a : -a; } } print Math.square(6); print Math.min(10, 5); print Math.max(782, 37349); print Math.abs(-92);","title":"Static methods"},{"location":"Classes/#inheritance","text":"Lox has support for single - inheritance. During the definintion of the class the parent class is to be specified after the < token. All the methods of the parent class including the constructor are available to the child class. When a method is called from the child class / object, first the method is searched in the sub class and then the super class. Suppose two methods with the same name exist in both the subclass and the superclass and a user wants to call the method in the superclass directly, super can be used. Example class Vehicle{ init(name) { this.name = name; } forward() { print this.name + \" Moves forward\"; } } class Car < Vehicle{ init(name) { super.init(name); } wheels() { print this.name + \" Has four wheels\"; } } class Bike < Vehicle{ init(name) { super.init(name); } wheels() { print this.name + \" Has two wheels\"; } } var honda = Bike(\"Honda\"); honda.forward(); honda.wheels(); var mclaren = Car(\"McLaren\"); mclaren.forward(); mclaren.wheels(); Important lox forbids the use of super in static methods. Warning When an object is created init is automatically called for the base class and if it is called again explicitly by the user, an error is thrown.","title":"Inheritance"},{"location":"Loops/","text":"Lox provides support for while and for style loops. The for loops are desugared into while loops during evaluation. While Loop Syntax while (<condition>) { <statements> } Example //Program that calculates all square numbers form 0 to n - 1 var n = 10; var squares = []; var a = 0; while (a < n) { squares.append(a * a); a = a + 1; } print squares; For Loop Syntax for(<intialization> ; <loop_condition> ; <increment / decrement>) { <statements>s } Example for (var a = 0; a < 10; a = a + 1) { print a; } Break Loops can be exited early using the break statement. Warning Use of the break statement anywhere outside loops throws an error. for (var a = 0; a < 10; a = a + 1) { print a; if (a == 6) break; }","title":"Loops"},{"location":"Loops/#while-loop","text":"Syntax while (<condition>) { <statements> } Example //Program that calculates all square numbers form 0 to n - 1 var n = 10; var squares = []; var a = 0; while (a < n) { squares.append(a * a); a = a + 1; } print squares;","title":"While Loop"},{"location":"Loops/#for-loop","text":"Syntax for(<intialization> ; <loop_condition> ; <increment / decrement>) { <statements>s } Example for (var a = 0; a < 10; a = a + 1) { print a; }","title":"For Loop"},{"location":"Loops/#break","text":"Loops can be exited early using the break statement. Warning Use of the break statement anywhere outside loops throws an error. for (var a = 0; a < 10; a = a + 1) { print a; if (a == 6) break; }","title":"Break"},{"location":"functions/","text":"Functions Functions are defined with the keyword fun with the follwing syntax fun <function_name> (<parameters>) { // logic required return <expression>; } An example is: fun add(a, b) { var c = a + b; return c; } Closures Lox functions support closures, thus the below program prints 10 appropriately. fun outer() { var x = 10; fun inner() { print x; } return inner; } var f = outer(); f(); Lox functions are first-class i.e they can be treated like any other varibale and be passed into functions, be returned by functions and be assigned to some variable. The above example showcases that too. Lambdas / Anonymous Functions Lox supports anonymous functions too. The syntax remains mostly the same with the exception of the function name not being included in the definition. These lambdas are considered expressions by lox. Syntax fun (<parameters>) { <statements> } Example var fibonacci = fun (a){ if (a == 0) return 0; if (a == 1 or a == 2) return 1; return fibonacci(a - 1) + fibonacci(a - 2); }; print fibonacci(10); Warning Using return outside a function or method throws an error. Native functions clock Returns the time elapsed since the program started execution in seconds.","title":"Functions"},{"location":"functions/#functions","text":"Functions are defined with the keyword fun with the follwing syntax fun <function_name> (<parameters>) { // logic required return <expression>; } An example is: fun add(a, b) { var c = a + b; return c; }","title":"Functions"},{"location":"functions/#closures","text":"Lox functions support closures, thus the below program prints 10 appropriately. fun outer() { var x = 10; fun inner() { print x; } return inner; } var f = outer(); f(); Lox functions are first-class i.e they can be treated like any other varibale and be passed into functions, be returned by functions and be assigned to some variable. The above example showcases that too.","title":"Closures"},{"location":"functions/#lambdas-anonymous-functions","text":"Lox supports anonymous functions too. The syntax remains mostly the same with the exception of the function name not being included in the definition. These lambdas are considered expressions by lox. Syntax fun (<parameters>) { <statements> } Example var fibonacci = fun (a){ if (a == 0) return 0; if (a == 1 or a == 2) return 1; return fibonacci(a - 1) + fibonacci(a - 2); }; print fibonacci(10); Warning Using return outside a function or method throws an error.","title":"Lambdas / Anonymous Functions"},{"location":"functions/#native-functions","text":"","title":"Native functions"},{"location":"functions/#clock","text":"Returns the time elapsed since the program started execution in seconds.","title":"clock"},{"location":"grammar/","text":"The main structure of lox's grammar is described as follows: program \u2192 (declaration)* EOF declaration \u2192 classDecl | funDecl | varDecl | statement classDecl \u2192 \"class\" IDENTIFIER (\"<\" IDENTIFIER)? \"{\" ( (\"static\")? function)* \"}\" funDecl \u2192 \"fun\" function function \u2192 IDENTIFIER \"(\" parameters? \")\" block parameters \u2192 IDENTIFIER (\",\" IDENTIFIER)* varDecl \u2192 \"var\" IDENTIFIER ( \"=\" expression )? \";\" statement \u2192 exprStmt | forStmt | ifStmt | printStmt | returnStmt | whileStmt | breakStmt | block ; exprStmt \u2192 expression \";\" forStmt \u2192 \"for\" \"(\" ( varDecl | exprStmt | \";\" ) expression? \";\" expression? \")\" statement ifStmt \u2192 \"if\" \"(\" expression \")\" statement ( \"else\" statement )? printStmt \u2192 \"print\" expression \";\" returnStmt \u2192 \"return\" expression? \";\" whileStmt \u2192 \"while\" \"(\" expression \")\" statement breakStmt \u2192 \"break\" \";\" block \u2192 \"{\" declaration* \"}\" expression \u2192 assignment ; assignment \u2192 ( call \".\" )? IDENTIFIER \"=\" assignment | ternary ternary \u2192 logic_or (\"?\" logic_or \":\" ternary) logic_or \u2192 logic_and ( \"or\" logic_and )* logic_and \u2192 equality ( \"and\" equality )* anonymous_func \u2192 \"FUN\" function \";\" | equality equality \u2192 comparison ( ( \"!=\" | \"==\" ) comparison )* comparison \u2192 term ( ( \">\" | \">=\" | \"<\" | \"<=\" ) term )* term \u2192 factor ( ( \"-\" | \"+\" ) factor )* factor \u2192 unary ( ( \"/\" | \"*\" ) unary )* unary \u2192 ( \"!\" | \"-\" ) unary | call call \u2192 primary ( \"(\" arguments? \")\" | \".\" IDENTIFIER )* primary \u2192 \"true\" | \"false\" | \"nil\" | \"this\" | NUMBER | STRING | IDENTIFIER | \"(\" expression \")\" | \"super\" \".\" IDENTIFIER | \"[\" elements? \"]\" arguments \u2192 expression (\",\" expression)* elements \u2192 expression (\",\" expression)*","title":"Grammar"}]}